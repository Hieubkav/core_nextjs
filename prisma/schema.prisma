generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  name          String?
  role          String        @default("customer")
  emailVerified DateTime?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  cart          Cart?

  @@map("users")
}

model Customer {
  id            Int       @id @default(autoincrement())
  email         String    @unique @db.VarChar(255)
  name          String?   @db.VarChar(255)
  password      String?   @db.VarChar(255)
  sdt           String?   @db.VarChar(20)
  diaChi        String?   @db.VarChar(500)
  ghiChu        String?   @db.VarChar(1000)
  emailVerified DateTime? @db.Timestamptz(6)
  isActive      Boolean?  @default(true)
  createdAt     DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  orders        Order[]
  reviews       Review[]

  @@map("customers")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  sortOrder   Int       @default(0)
  isVisible   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime @updatedAt
  products    Product[]

  @@map("categories")
}

model Image {
  id            Int            @id @default(autoincrement())
  filename      String
  originalName  String?
  alt           String?
  title         String?
  size          Int?
  mimeType      String?
  url           String
  sortOrder     Int            @default(0)
  isVisible     Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
 posts         PostImage[]
  productImages ProductImage[]
  sliders       Slider[]

  @@map("images")
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  slug        String           @unique
  description String?
  shortDesc   String?
  features    Json?
  status      String           @default("active")
  sortOrder   Int              @default(0)
  isVisible   Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  categoryId  Int
  cartItems   CartItem[]
  orderItems OrderItem[]
  images      ProductImage[]
  variants    ProductVariant[]
  category    Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  reviews     Review[]

  @@map("products")
}

model ProductVariant {
  id            Int         @id @default(autoincrement())
  name          String
  description   String?
  price         Decimal     @db.Decimal(10, 2)
  originalPrice Decimal?    @db.Decimal(10, 2)
  isDefault     Boolean     @default(false)
  sortOrder     Int         @default(0)
  isVisible     Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  productId     Int
  cartItems     CartItem[]
  orderItems    OrderItem[]
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  imageId   Int
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, imageId])
  @@map("product_images")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        Int            @id @default(autoincrement())
  cartId    Int
  productId Int
  variantId Int
  quantity  Int            @default(1)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  cart      Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, variantId])
  @@map("cart_items")
}

model Order {
  id            Int         @id @default(autoincrement())
  orderNumber   String      @unique
  customerId    Int
  customerName  String
  customerEmail String
  customerPhone String?
  totalAmount   Decimal     @db.Decimal(10, 2)
  status        String      @default("pending")
  notes         String?
  adminNotes    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  items         OrderItem[]
  customer      Customer    @relation(fields: [customerId], references: [id])

  @@map("orders")
}

model OrderItem {
  id          Int            @id @default(autoincrement())
  orderId     Int
  productId   Int
  variantId   Int
  productName String
  variantName String
  price       Decimal        @db.Decimal(10, 2)
  quantity    Int            @default(1)
  createdAt   DateTime       @default(now())
  order       Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product        @relation(fields: [productId], references: [id])
  variant     ProductVariant @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model Review {
  id        Int      @id @default(autoincrement())
  customerId Int
  productId Int
  rating    Int
  title     String?
  content   String?
  isVisible Boolean  @default(true)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer  Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, productId])
  @@map("reviews")
}

model Slider {
  id         Int      @id @default(autoincrement())
  title      String
  subtitle   String?
  content    String?
  buttonText String?
  buttonLink String?
  imageId    Int?
  sortOrder  Int      @default(0)
  isVisible  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  image      Image?   @relation(fields: [imageId], references: [id])

  @@map("sliders")
}

model Post {
  id        Int         @id @default(autoincrement())
  title     String
  slug      String      @unique
  excerpt   String?
  content   String?
  status    String      @default("published")
  sortOrder Int         @default(0)
  isVisible Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  images    PostImage[]

  @@map("posts")
}

model PostImage {
  id        Int      @id @default(autoincrement())
  postId    Int
  imageId   Int
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, imageId])
  @@map("post_images")
}

model FAQ {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  sortOrder Int      @default(0)
  isVisible Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

 @@map("faqs")
}

model Setting {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String?
  type        String   @default("text")
  group       String   @default("general")
  label       String?
  description String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

model Webdesign {
  id        Int      @id @default(autoincrement())
  page      String   @default("homepage")
  section   String
  config    Json
  sortOrder Int      @default(0)
  isVisible Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

 @@unique([page, section])
  @@map("webdesigns")
}

model public_Setting {
  id          Int       @id @default(autoincrement())
  key         String    @unique @db.VarChar(255)
  value       String?
  group       String    @db.VarChar(100)
  label       String    @db.VarChar(255)
  description String?
  type        String?   @default("text") @db.VarChar(50)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @db.Timestamp(6)

  @@index([group])
  @@index([key])
  @@map("Setting")
}
